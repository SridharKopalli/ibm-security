////
/// Type.
/// @group type
/// @copyright IBM Security 2019 - 2021
////

@use 'sass:map';

@use '@carbon/type/scss/modules/font-family';
@use '@carbon/type/scss/modules/styles';

@use '../deprecate';
@use '../feature-flags';
@use '../namespace';

/// IBM Plex.
/// @type boolean
$css--plex: true;

@import 'carbon-components/scss/globals/scss/css--font-face';

// TODO: `2.x` - To be removed.

/// Monospaced font family.
/// @type string
$font-family-mono: font-family.font-family(
  $name: mono,
);

/// Sans serif font family.
/// @type string
$font-family-sans-serif: font-family.font-family(
  $name: sans,
);

/// Serif font family.
/// @type string
$font-family-serif: font-family.font-family(
  $name: serif,
);

/// Font family deprecation mappings.
/// @type Map<string, string>
$font-family-deprecation-map: (
  mono:
    font-family.font-family(
      $name: mono,
    ),
  serif:
    font-family.font-family(
      $name: serif,
    ),
);

/// Font weight deprecation mappings.
/// @type Map<string, Length>
$font-weight-deprecation-map: (
  light:
    font-family.font-weight(
      $weight: light,
    ),
  semibold:
    font-family.font-weight(
      $weight: semibold,
    ),
);

/// Type style deprecation mappings.
/// @type Map<string, string>
$type-style-deprecation-map: (
  a: caption-01,
  b: body-long-01,
  c: body-short-02,
  d: heading-02,
  e: productive-heading-03,
  f: expressive-heading-04,
  g: productive-heading-04,
  h: productive-heading-05,
  i: display-01,
  j: display-03,
  k: display-04,
);

///
/// Deprecation warning method for `type-scale-item`.
/// @param {string} $scale-item The deprecated scale item parameter.
///
@mixin type-scale-item($scale-item) {
  $name: map.get(
    $map: $type-style-deprecation-map,
    $key: $scale-item,
  );

  @warn deprecate.deprecate($actual: 'type-scale-item($scale-item: #{$scale-item})', $expected: 'carbon--type-style($name: #{$name})');
  @include styles.type-style($name: $name);
}

// TODO: `2.x` - Deprecate after teams have migrated to `@carbon/type`.

@if feature-flags.feature-flag-enabled($feature: feature-flags.$type__name) {
  @include namespace.export-namespace($name: feature-flags.$type__name) {
    [class*='#{feature-flags.$type__name}'] {
      margin-top: 0;
    }

    .#{feature-flags.$type__name} {
      font-family: font-family.font-family($name: sans);

      &-italic {
        font-style: italic;
      }

      @each $font-family-class,
        $font-family-value in $font-family-deprecation-map
      {
        &-#{$font-family-class} {
          font-family: $font-family-value;
        }
      }
    }

    @each $font-weight-class, $font-weight-value in $font-weight-deprecation-map
    {
      .#{feature-flags.$type__name}-#{$font-weight-class} {
        font-weight: $font-weight-value;
      }
    }

    @each $type-class, $type-style-name in $type-style-deprecation-map {
      .#{feature-flags.$type__name}-#{$type-class} {
        @include styles.type-style($name: $type-style-name);
      }
    }
  }
}
